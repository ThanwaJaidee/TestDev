import pandas as pd
import json
import os

# -----------------------------
# 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ path ‡πÑ‡∏ü‡∏•‡πå input/output
# -----------------------------
input_path = r"D:\Devtest\ToJsonl\10002169_Increase 90 Volt.xls"
output_path = os.path.splitext(input_path)[0] + ".jsonl"  # ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏ï‡πà‡∏™‡∏Å‡∏∏‡∏• .jsonl

# -----------------------------
# 2. ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
# -----------------------------
df = pd.read_excel(input_path)

# ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡∏ã‡πà‡∏≠‡∏ô)
df.columns = df.columns.str.strip()

# -----------------------------
# 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
# -----------------------------
def find_col(df, keywords):
    for col in df.columns:
        if any(k.lower() in str(col).lower() for k in keywords):
            return col
    return None

step_col = find_col(df, ["step"])
desc_col = find_col(df, ["desc"])
unit_col = find_col(df, ["unit"])
result_col = find_col(df, ["result", "status", "output"])

print("üßæ Detected columns:", step_col, desc_col, unit_col, result_col)

# ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πà‡∏ô
# df.rename(columns={"Step#": "Step #"}, inplace=True)

# -----------------------------
# 4. ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô instruction
# -----------------------------
df["instruction"] = (
    "Test " + df["Test #"].astype(str) + " : " +
    "Step " + df["Step #"].astype(str) + " : " +
    "Description " + df["Description"].fillna("") +
    " | Unit: " + df["Unit"].fillna("")
)

# ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‚ÄúLow Limit‚Äù ‡∏´‡∏£‡∏∑‡∏≠ ‚ÄúHigh Limit‚Äù ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô
# df["instruction"] = (
#     "Step " + df["Step #"].astype(str) + ": " +
#     df["Description"].fillna("") +
#     " | Range: " + df["Low Limit"].astype(str) + " - " + df["High Limit"].astype(str)
# )

# -----------------------------
# 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSONL
# -----------------------------
records = []
for _, row in df.iterrows():
    record = {
        "instruction": row["instruction"],
        "output": str(row["Result"]) if "Result" in df.columns else ""
    }
    records.append(record)

# -----------------------------
# 6. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô JSONL
# -----------------------------
with open(output_path, "w", encoding="utf-8") as f:
    for r in records:
        f.write(json.dumps(r, ensure_ascii=False) + "\n")

print(f"\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSONL ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {output_path}")
print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {len(records)}")
